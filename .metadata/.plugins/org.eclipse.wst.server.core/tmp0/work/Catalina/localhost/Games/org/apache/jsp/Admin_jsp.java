/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.13
 * Generated at: 2024-03-05 18:05:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Admin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!----IT17045940--->\n");
      out.write("<!----Dias A.M.A.P.>\n");
      out.write("<!----G-1.2-------->\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n");
      out.write("<title>Admin Login</title>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>GAME SPOT</title>\n");
      out.write("	<meta name=\"keywords\" content=\"\" />\n");
      out.write("	<meta name=\"description\" content=\"\" />\n");
      out.write("\n");
      out.write("	<meta charset=\"utf-8\">\n");
      out.write("	<meta name=\"viewport\" content=\"initial-scale=1\">\n");
      out.write("    \n");
      out.write("	<link href='http://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,700italic,800italic,400,300,600,700,800' rel='stylesheet' type='text/css'>\n");
      out.write("	<link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\n");
      out.write("	<link rel=\"stylesheet\" href=\"css/font-awesome.min.css\">\n");
      out.write("	<link rel=\"stylesheet\" href=\"css/templatemo_misc.css\">\n");
      out.write("	<link rel=\"stylesheet\" href=\"css/templatemo_style.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	\n");
      out.write("	\n");
      out.write("\n");
      out.write("						<div class=\"welcome-text\" align = \"center\">>\n");
      out.write("					  <img src=\"images/login.png\" height = \"200\" width = \"220\">	\n");
      out.write("						  <h2><strong>Admin Login</strong></h2>\n");
      out.write("						  <p>-- Sign in Here with your Credentials --</p>\n");
      out.write("						  <pre>\n");
      out.write("        <form action=\"AdminLoginServlet\" method=\"post\">\n");
      out.write("            \n");
      out.write("        <label class=\"main\">Username: </label>           <input type=\"text\" placeholder=\"adminname\" name=\"username\">\n");
      out.write("        \n");
      out.write("      	 </select>  \n");
      out.write("            \n");
      out.write("        <label class=\"main\">Password: </label>           <input type=\"password\" placeholder=\"password\" name=\"password\">\n");
      out.write("\n");
      out.write("                        \n");
      out.write("                 <input type = \"submit\" value = \"Login\" style = \"background:#38A9E3;\n");
      out.write("                 \n");
      out.write("\n");
      out.write("  font-family: Open Sans;\n");
      out.write("  color: #ffffff;\n");
      out.write("  font-size: 27px;\n");
      out.write("  padding: 10px 20px 10px 20px;\n");
      out.write("  text-decoration: none;\">\n");
      out.write("       \n");
      out.write("\n");
      out.write("       </form>\n");
      out.write("\n");
      out.write("        </pre>\n");
      out.write("						  <!--Note-->\n");
      out.write("						</div>\n");
      out.write("					</div>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("		</div> <!-- /#sTop -->\n");
      out.write(" </div>\n");
      out.write("		<div class=\"container-fluid\">\n");
      out.write("\n");
      out.write("		</div>	\n");
      out.write("\n");
      out.write("		\n");
      out.write("\n");
      out.write("	<!-- JavaScripts -->\n");
      out.write("	<script src=\"js/jquery-1.10.2.min.js\"></script>\n");
      out.write("	<script src=\"js/jquery.singlePageNav.js\"></script>\n");
      out.write("	<script src=\"js/jquery.flexslider.js\"></script>\n");
      out.write("	<script src=\"js/jquery.prettyPhoto.js\"></script>\n");
      out.write("	<script src=\"js/custom.js\"></script>\n");
      out.write("	<script>\n");
      out.write("		$(document).ready(function(){\n");
      out.write("			$(\"a[data-gal^='prettyPhoto']\").prettyPhoto({hook: 'data-gal'});\n");
      out.write("		});\n");
      out.write("\n");
      out.write("        function initialize() {\n");
      out.write("          var mapOptions = {\n");
      out.write("            zoom: 13,\n");
      out.write("            center: new google.maps.LatLng(40.7809919,-73.9665273)\n");
      out.write("          };\n");
      out.write("\n");
      out.write("          var map = new google.maps.Map(document.getElementById('map-canvas'),\n");
      out.write("              mapOptions);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function loadScript() {\n");
      out.write("          var script = document.createElement('script');\n");
      out.write("          script.type = 'text/javascript';\n");
      out.write("          script.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&' +\n");
      out.write("              'callback=initialize';\n");
      out.write("          document.body.appendChild(script);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        window.onload = loadScript;\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
